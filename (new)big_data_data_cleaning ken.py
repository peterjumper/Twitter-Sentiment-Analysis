# -*- coding: utf-8 -*-
"""(NEW)Big Data_Data Cleaning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18nlhVLf2uYYdJdxmEM1vxZeT0FID-vJA
"""

#Part One: Basic Information and Graph

import re
import numpy as np
import pandas as pd
import io

# plotting
import seaborn as sns
from wordcloud import WordCloud
import matplotlib.pyplot as plt
# nltk
from nltk.stem import WordNetLemmatizer
# sklearn
from sklearn.svm import LinearSVC
from sklearn.naive_bayes import BernoulliNB
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import confusion_matrix, classification_report

# Importing the dataset
DATASET_COLUMNS = ['target', 'ids', 'date', 'flag', 'user', 'text']
DATASET_ENCODING = "ISO-8859-1"

file_path = '/content/combined.csv'

try:
    with open(file_path, encoding=DATASET_ENCODING) as file:
        lines = file.readlines()
        cleaned_lines = [line[:-1] if line.endswith('\n') else line for line in lines]
    csv_data = io.StringIO('\n'.join(cleaned_lines))
    df = pd.read_csv(csv_data, names=DATASET_COLUMNS)
except pd.errors.ParserError as e:
    # Handle the ParserError
    print("ParserError:", e)
    # Additional error handling or troubleshooting steps can be implemented here
    df = pd.DataFrame()  # Create an empty DataFrame or assign None if desired

if not df.empty:
    df.sample(5)
    print(df.head())

print(df.columns)  #columns/features in data
print('length of data is', len(df)) #length of the dataset

df.shape #The shape of the DataFrame is expressed as (rows, columns)

df.info() #data information
df.dtypes #datatypes of all colums

np.sum(df.isnull().any(axis=1)) #checking for null values

#Rows and columns in the dataset
print('Count of columns in the data is: ', len(df.columns))
print('Count of row in the data is: ', len(df))

#check unique target values
df['target'].unique()

#check the number of target values
df['target'].nunique()

#Data Visualization of target Variables
#Plotting the distribution for the dataset

ax = df.groupby('target').count().plot(kind='bar', title='Distribution of data', legend = False)
ax.set_xticklabels(['Negative', 'Positive'], rotation=0)
#Storing data in lists
text, sentiment = list(df['text']),list(df['target'])

sns.countplot(x='target', data=df)

# Step Two: Data Preprocess -->Before training the model

#Selecting the text and target column for our further analysis
data =df[['text', 'target']]

#Replacing the value to ease understanding
#Assigning 1 to Positive sentiment 4
data.loc[:, 'target'] = data['target'].replace(4, 1)

#printing unique values of target variables
unique_values = data['target'].unique()
print(unique_values)

# Separating positive and negative tweets
data_pos = data[data['target'] == 1]
data_neg = data[data['target'] == 0]


# Combining positive and negative tweets
dataset = pd.concat([data_pos, data_neg])

# Making statement text lowercase
dataset['text'] = dataset['text'].str.lower()

print(dataset['text'].tail())

#Defining set containing all stopwords in English
stopwordlist = ['a', 'about', 'above', 'after', 'again', 'ain', 'all', 'am', 'an',
             'and','any','are', 'as', 'at', 'be', 'because', 'been', 'before',
             'being', 'below', 'between','both', 'by', 'can', 'd', 'did', 'do',
             'does', 'doing', 'down', 'during', 'each','few', 'for', 'from',
             'further', 'had', 'has', 'have', 'having', 'he', 'her', 'here',
             'hers', 'herself', 'him', 'himself', 'his', 'how', 'i', 'if', 'in',
             'into','is', 'it', 'its', 'itself', 'just', 'll', 'm', 'ma',
             'me', 'more', 'most','my', 'myself', 'now', 'o', 'of', 'on', 'once',
             'only', 'or', 'other', 'our', 'ours','ourselves', 'out', 'own', 're','s', 'same', 'she', "shes", 'should', "shouldve",'so', 'some', 'such',
             't', 'than', 'that', "thatll", 'the', 'their', 'theirs', 'them',
             'themselves', 'then', 'there', 'these', 'they', 'this', 'those',
             'through', 'to', 'too','under', 'until', 'up', 've', 'very', 'was',
             'we', 'were', 'what', 'when', 'where','which','while', 'who', 'whom',
             'why', 'will', 'with', 'won', 'y', 'you', "youd","youll", "youre",
             "youve", 'your', 'yours', 'yourself', 'yourselves']

def cleaning_stopwords(text):
    return " ".join([word for word in str(text).split() if word not in STOPWORDS])

#Cleaning and removing the above stop words list from the tweet text
STOPWORDS = set(stopwordlist)
def cleaning_stopwords(text):
    return " ".join([word for word in str(text).split() if word not in STOPWORDS])
dataset['text'] = dataset['text'].apply(lambda text: cleaning_stopwords(text))
print(dataset['text'].head())

#Cleaning and removing punctuations

import string

english_punctuations = string.punctuation
punctuations_list = english_punctuations

def cleaning_punctuations(text):
    translator = str.maketrans("", "", punctuations_list)
    return text.translate(translator)

dataset['text'] = dataset['text'].apply(lambda x: cleaning_punctuations(x))
dataset['text'].tail()

#Cleaning and removing repeating characters

def cleaning_repeating_char(text):
  return re.sub(r'(.)1+', r'1', text)

dataset['text'] = dataset['text'].apply(lambda x: cleaning_repeating_char(x))
dataset['text'].tail()

#Cleaning and removing URLs

def cleaning_URLs(data):
  return re.sub('((www.[^s]+)|(https?://[^s]+))',' ',data)

dataset['text'] = dataset['text'].apply(lambda x: cleaning_URLs(x))
dataset['text'].tail()

#Cleaning and removing numeric number

def cleaning_numbers(data):
  return re.sub('[0-9]+', '', data)

dataset['text'] =dataset['text'].apply(lambda x: cleaning_numbers(x))
dataset['text'].tail()